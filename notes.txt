Blockchain - a distributed ledger that stores 'blocks' containing data
-- 'Trustless' - There is no central body to trust
-- Ledger - a copy of all the transactions -- copies of the the ledger are shared across the network each 'node'
-- Block - the individual peice which makes up the blockchain and named with a 'hash'
--- Hash - Unique value generated from a hash function based on:
																- timestamp stored within the block
																- creation data
																- position in the block
																- hash of the previous block

Proof of Work
-- High level of computational work yeilding as proof of legitamacy
-- Only one block is processed to be 'manageable'. Generating an entire chain would be computationally impossible
-- Algorithm used is similar to 'Hashcash' and is used for Bitcoin
--- The difficulty level increases by way of missing digits in a hash: 000000haxi29573jajrH -- where the 0's are missing hash digits. Six 0's means the difficulty level is '6'
---- The missing hash digits have to be generated to find a match, known as 'mining'
----- The generated hash digits are created by adjusting the 'nonce' value, which is used only once each time, starting at 0
------ Once the correct missing digits are determined, the block has been completed and will be added to the chain
-- Dynamic difficulty mine rate -- compare time-stamp of newly and previously completed blocks to adjust difficulty level
-- 51% Attack: Where a single entity owns 51% of the networks power and attempts to replace the chain with a dishonest chain

Mining
-- 'Unconfirmed' - Transactions that have not yet been processed
-- Any peer can repace the blockchain
-- The first miner that completes the block algorithm gets to add the block to the ledger
-- This miner is rewarded with cryptocurrency for completing the block

Multiple Chain Validation
-- In an instance where two or more miners simutaniously add new blocks, the system will wait for a miner which adds more blocks or a 'longer chain' before chain update, and then adds the other blocks
-- This is to ensure that all the blocks get updated and everyone has the same copy, regardless of block update timing.

Hash Validation
-- Checks hash value of every chain
--- If the hash does not match, then it is discarded

Peer-to-peer server
-- All nodes are 'peers' running 'websockets' on separate ports
-- All connected peers can broadcast stringified data to all the other connected peers
-- Upon intitial instance of the blockchain, the original peer will start the blockchain server 
-- Need to ensure that newly connected peers have the latest blockchain

Wallets
-- Stores the public and private key of an individual
-- Public key is the address of the wallet

Transactions
-- An object which contains an input and an output
   - Input: sender public key address, sender balance, timestamp, signature
   - Output: sendee public key address, amount being sent, amount remaining after send

Digital signatures
-- Cryptography - The layer used for security between transactions in the form of 'digital signatures'
-- Private key - Hash signature used by the individual to create a signature -- private key hash + data hash = public key hash
-- Public key - Hash signature publically available for verification


---------------------------------------------------------------------------------
Testing for 'Section 5: Connect to Blockchain Peers'
-- Bash terminal 1: npm run dev                                                                                                 //Start initial peer websocket server
-- Bash terminal 2: HTTP_PORT=3002 P2P_PORT=5002 PEERS=ws://localhost:5001 npm run dev                                          //Start peer 2
-- Bash terminal 3: HTTP_PORT=3003 P2P_PORT=5003 PEERS=ws://localhost:5001,ws://localhost:5002 npm run dev                      //Start peer 3
-- Bash terminal 4: HTTP_PORT=3004 P2P_PORT=5004 PEERS=ws://localhost:5001,ws://localhost:5002,ws://localhost:5003 npm run dev  //Start peer 4
----------------------------------------------------------------------------------
BASH terminal:

//creates package.json file
npm init -y

//'nodemon' (as development depandancy) -- Works like Node but has live development server
npm i nodemon --save-dev

//'crypto-js' module -- Contains SHA-256 function
npm i crypto-js --save

//'jest' module (as development depandancy) -- Test runner that can run files with the '*.test.js' extension
npm i jest --save-dev

//'express' module -- Used to create HTTP APIs
npm i express --save

//'body-parser' middle-care module -- Allows recieving JSON data from POST requests
npm i body-parser --save

//'web socket module' -- Provides web socket network functionality for client
npm i ws --save

//'Elliptic module' (as development depandancy) -- Provides olyptic curve based cryptography, used to create public and private keys for the wallet
npm i elliptic --save
